package com.joelmartinez.ordermanagementservice.service;

import com.joelmartinez.ordermanagementservice.event.OrderCompletedEvent;
import com.joelmartinez.ordermanagementservice.service.request.CreateOrderRequest;
import com.joelmartinez.ordermanagementservice.service.request.GiftCardRequest;
import com.joelmartinez.ordermanagementservice.service.response.CreateOrderResponse;
import com.joelmartinez.ordermanagementservice.service.response.GiftCardResponse;
import lombok.extern.log4j.Log4j2;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.time.LocalDateTime;
import java.util.UUID;

@Log4j2
@Service
public class OrderManagementServiceImpl implements OrderManagementService {

    private final WebClient.Builder webClient;
    private final KafkaTemplate<String, OrderCompletedEvent> kafkaTemplate;

    public OrderManagementServiceImpl(WebClient.Builder webClient,
                                      KafkaTemplate<String, OrderCompletedEvent> kafkaTemplate) {
        this.webClient = webClient;
        this.kafkaTemplate = kafkaTemplate;
    }

    @Override
    public CreateOrderResponse create(CreateOrderRequest request) {
        log.info("Create order with request {}", request);

        GiftCardRequest giftCardRequest = new GiftCardRequest();
        giftCardRequest.setValue(request.getGiftCardValue());

        // Call gift card supplier service to request a new gift card with the specified value
        GiftCardResponse giftCardResponse = webClient.build().post()
                .uri("http://giftcard-supplier-service/api/gift-card")
                .body(Mono.just(giftCardRequest), GiftCardRequest.class)
                .retrieve()
                .bodyToMono(GiftCardResponse.class)
                .block();

        if (giftCardResponse != null && giftCardResponse.getUuid() != null) {
            CreateOrderResponse response = new CreateOrderResponse();
            response.setOrderId(UUID.randomUUID().toString());
            response.setCreatedAt(LocalDateTime.now());
            response.setValue(request.getGiftCardValue());
            // Set the gift card code generated by the gift card supplier service
            response.setGiftCardCode(giftCardResponse.getUuid());

            kafkaTemplate.send(
                    "notificationTopic",
                    OrderCompletedEvent.builder()
                            .orderId(response.getOrderId()).customer(request.getCustomer())
                            .giftCard(response.getGiftCardCode()).value(request.getGiftCardValue())
                            .build()

            );

            return response;
        }

        throw new IllegalArgumentException("Purchase could not be processed.");
    }
}
